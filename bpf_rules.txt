This is a BNF-ish rule set for a BPF file.

BNF - https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form

BPF - Binary Parse Format (The language used by bp)

[<item>] <------------ <item> is optional
{<item>} <------------ <item> may repeat
[{<item>}] <---------- <item> is optional, and may repeat (0 or more)

<bpf file> := <line statement> {<line statement>}

<line statement> := <parse point> | <setopt> | <enum> | <etag>

<setopt> := "setopt" <ws> <cmd-line option> <ws> <opt_val> <eol>

<opt_val> := <bool> for simple switches, the arg for option switches

<etag> := "settag" <tag> <ws> "=" <ws> <value>

<enum> := "setenum" <enumtag> <ws> "=" <ws> <enum clause>

<parse point> := <offset> <size> <tag> <label> <dt> [{<ppopt>}]

<offset> := <value>

<size> := <value>

<label> := A(n optionally) quoted string that can have spaces

<dt> := See data types in stdint.h (uint32, int8, string, char, etc...)

<enumtag> := <tag>

# Of course this is not really commented out... but this was the old
# naming convention, I am now converting to a new, and am somewhat afraid
# that this convention might have been coded more than once.
#<enumtag> := "enum"<ident>
#<ident> := 4-6 alpha-numeric chars

<enum clause> := "{" [<ws>] <namevalue> {<namevalue>} [<enum default>] "}"

<namevalue> := <numeric> ":" <estring> ";"

<enum default>:= "default:" <estring> ";"

<numeric> := An integer number (most cases decimal or hex)

<estring> := String with no space, nor terminating chars, ("" if has space).

<cmd-line option> := (See ./bp -h for a list)

<ws> := " " | <tab>

<bool> := "true" | "false" | "off" | "on"    <-----(not case sensitive)

<eol> := "\n"

<value> := <numeric> | <tag> | <equation>

<tag> := Between one and MAX_TAG_LEN <valid_tag_char>

<valid_tag_char> := 0-9 | a-z | A-Z | '.' | '-' | '_'

<equation> := "(" <value> <operator> <value> ")"

<operator> := "+" | "-" | "*" | "\"

<ppopt> := "hidden" | <must=> | <enumtag>

<must=> := "must=" <numeric>

________________________________________________
Current supported "data types" (see <dt> above):
  uint8
  int8
  uint16
  int16
  uint32
  int32
  uint64
  int64
  char     - uint8 represented as a single char string
  ztstr    - Zero terminated string (may be "fixed size, but it may also
             terminate *before* the length with a 0)
  flstr    - Fixed length string. Print all chars and *force* termination

Notes:
 - There are no "wide" char strings supported
 - I propose defining "hard-coded" tags. This would have syntax like that
   of the enum string. Discussion of this can be found in version.h.
